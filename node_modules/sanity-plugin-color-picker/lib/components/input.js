"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _PatchEvent = _interopRequireWildcard(require("@sanity/form-builder/PatchEvent"));

var _reactColor = require("react-color");

var _fa = require("react-icons/fa");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactEyedrop = require("react-eyedrop");

var _default3 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _rgb2hex = _interopRequireDefault(require("rgb2hex"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PickerStyles = _styledComponents.default.div`
  position: relative;
  
  .--mb--color-picker {
    position: relative !important;
    width: 100%;
    box-shadow: none;
    z-index: 1;
  }

  .color-picker-header {
    display: none;
  }

  .color-picker-body {
    padding: 0;
  }

  .colorInput {
    input {
      padding-left: 46px;
    }
  }
`;
const ColorPreview = _styledComponents.default.div`
  position: absolute;
  top: 5px;
  left: 5px;
  width: 28px;
  height: 28px;
  background-color: ${function (props) {
  return props.color || '#fff';
}};
  border-radius: 10000px;
  border: 1px solid rgb(189, 198, 212);
  overflow: hidden;
  z-index: 1;
  
  &:hover {
    cursor: pointer;
  }
`;
const Dropper = _styledComponents.default.button`
  appearance: none;
  position: absolute;
  top: -92px;
  left: 6px;
  z-index: 10;
  background-color: ${function (props) {
  return props.color ? props.color : '#fff';
}};
  color: ${function (props) {
  return setColor(props.color || '#fff');
}};
  width: 20px;
  height: 20px;
  border: 1px solid rgb(189, 198, 212);
  border-radius: 1000px;
`;
const hexRegex = /^#[0-9A-F]{6}$/i;

const hex2rgb = function hex2rgb(hex) {
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function (m, r, g, b) {
    return r + r + g + g + b + b;
  });
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    red: parseInt(result[1], 16),
    green: parseInt(result[2], 16),
    blue: parseInt(result[3], 16)
  } : null;
};

const setColor = function setColor(color) {
  // Need to find a way to convert hex to rgb
  const _hex2rgb = hex2rgb(color),
        red = _hex2rgb.red,
        green = _hex2rgb.green,
        blue = _hex2rgb.blue;

  if (red * 0.299 + green * 0.587 + blue * 0.114 > 186) {
    return '#000';
  }

  return '#fff';
};

const DropperButton = function DropperButton(_ref) {
  let onClick = _ref.onClick,
      color = _ref.customProps.color;
  return /*#__PURE__*/_react.default.createElement(Dropper, {
    className: "btn",
    onClick: onClick,
    color: color
  }, /*#__PURE__*/_react.default.createElement(_fa.FaEyeDropper, {
    size: '0.65em',
    style: {
      position: 'relative',
      left: -2,
      top: -1
    }
  }));
};

class ColorPicker extends _react.default.Component {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    _defineProperty(this, "handlePickerChange", function (color) {
      const patch = color.hex === '' ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(color.hex);

      _this.props.onChange(_PatchEvent.default.from(patch));
    });

    _defineProperty(this, "handleChange", function (event) {
      let color;

      if (event.target) {
        color = event.target.value;

        if (color.slice(0, 1) !== '#') {
          color = '#' + color;
        }

        console.log(color.slice(0, 1));
      } else {
        const rgbValue = event.split(',');
        console.log(rgbValue);

        if (rgbValue.length) {
          color = (0, _rgb2hex.default)(event);
          color = color.hex;
        } else {
          color = event;
        }
      }

      const patch = color === '' ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(color);

      _this.props.onChange(_PatchEvent.default.from(patch));
    });

    _defineProperty(this, "handleEyedropper", function (_ref2) {
      let hex = _ref2.hex;
      const patch = (0, _PatchEvent.set)(hex);

      _this.props.onChange(_PatchEvent.default.from(patch));
    });

    _defineProperty(this, "handleClear", function (event) {
      event.preventDefault();

      _this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.unset)()));

      _this.setState({
        pickColor: false
      });
    });

    _defineProperty(this, "handleClose", function (event) {
      event.preventDefault();

      _this.setState({
        pickColor: false
      });
    });

    _defineProperty(this, "openPicker", function (event) {
      event.preventDefault();

      _this.setState({
        pickColor: !_this.state.pickColor
      });
    });

    this.state = {
      pickColor: false
    };
  }

  focus() {
    this._inputElement.focus();
  }

  render() {
    const _this$props = this.props,
          type = _this$props.type,
          value = _this$props.value,
          level = _this$props.level,
          markers = _this$props.markers;
    return /*#__PURE__*/_react.default.createElement(PickerStyles, null, /*#__PURE__*/_react.default.createElement(_default2.default, {
      label: type.title,
      level: level,
      description: type.description
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: 'colorInput',
      style: {
        position: 'relative'
      }
    }, /*#__PURE__*/_react.default.createElement(ColorPreview, {
      color: hexRegex.test(value) ? value : '#fff',
      onClick: this.openPicker
    }), /*#__PURE__*/_react.default.createElement(_default3.default, {
      type: "text",
      value: value === undefined ? '' : value,
      onChange: this.handleChange
    })), this.state.pickColor && /*#__PURE__*/_react.default.createElement("div", {
      style: {
        marginTop: 20,
        position: 'relative'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactColor.ChromePicker, {
      color: value || '#000',
      onChange: this.handlePickerChange,
      onChangeComplete: this.handlePickerChange,
      disableAlpha: true
    }), /*#__PURE__*/_react.default.createElement(_reactEyedrop.EyeDropper, {
      onChange: this.handleEyedropper,
      cursorActive: 'crosshair',
      customComponent: DropperButton,
      customProps: {
        color: value || '#000'
      }
    }))));
  }

}

ColorPicker.propTypes = {
  type: _propTypes.default.shape({
    title: _propTypes.default.string
  }).isRequired,
  level: _propTypes.default.number,
  value: _propTypes.default.number,
  onChange: _propTypes.default.func.isRequired
};
var _default = ColorPicker;
exports.default = _default;